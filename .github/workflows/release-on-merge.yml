name: Create Release Tag

# This workflow creates release tags when Release PRs are merged.
# IMPORTANT: Uses RELEASE_PR_TOKEN (same as changelog-pr.yml) to trigger downstream workflows.
# The default GITHUB_TOKEN cannot trigger workflows for security reasons.

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write

jobs:
  create-release-tag:
    runs-on: ubuntu-latest
    # Only run if PR was merged and title indicates it's a release PR
    if: >
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.title, 'chore: release v')

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.RELEASE_PR_TOKEN }}

      - name: Extract version from PR title
        id: extract_version
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$PR_TITLE" | sed -n 's/^chore: release v\(.*\)$/\1/p')

          if [ -z "$VERSION" ]; then
            echo "‚ùå Could not extract version from PR title: $PR_TITLE"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Extracted version: $VERSION"

      - name: Validate version format
        run: |
           VERSION="${{ steps.extract_version.outputs.version }}"

           # Validate semver format (basic check)
           if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' >/dev/null; then
             echo "‚ùå Invalid version format: $VERSION"
             echo "Expected format: X.Y.Z"
             exit 1
           fi

           echo "‚úÖ Version format is valid: $VERSION"

      - name: Validate PR version matches code version
        run: |
           PR_VERSION="${{ steps.extract_version.outputs.version }}"
           
           # Get the actual version from Cargo.toml
           CODE_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
           
           if [ "$PR_VERSION" != "$CODE_VERSION" ]; then
             echo "‚ùå Version mismatch detected!"
             echo "PR title version: $PR_VERSION"
             echo "Code version: $CODE_VERSION"
             echo ""
             echo "This usually indicates a bug in the changelog automation."
             echo "The PR title version should match the version in Cargo.toml."
             echo ""
             echo "Possible causes:"
             echo "1. PR was created with wrong version"
             echo "2. Code was not properly updated during PR creation"
             echo "3. Manual changes were made without updating both"
             echo ""
             echo "Please check the changelog automation workflow."
             exit 1
           fi
           
           echo "‚úÖ PR version ($PR_VERSION) matches code version ($CODE_VERSION)"

      - name: Check if tag already exists
        id: check_tag
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          TAG="v$VERSION"

          if git tag -l | grep -q "^$TAG$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Tag $TAG already exists"
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag $TAG does not exist, safe to create"
          fi

      - name: Create release tag
        if: steps.check_tag.outputs.tag_exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PR_TOKEN }}
        run: |
           VERSION="${{ steps.extract_version.outputs.version }}"
           TAG="v$VERSION"

           # Configure git with PAT authentication
           git config user.name "github-actions[bot]"
           git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

           # Set up authentication using the PAT
           git remote set-url origin "https://x-access-token:${{ secrets.RELEASE_PR_TOKEN }}@github.com/${{ github.repository }}.git"

           # Create annotated tag
           git tag -a "$TAG" -m "Release $TAG

           Automated release created from PR merge.

           This tag triggers the cargo-dist release workflow which will:
           - Build cross-platform binaries
           - Create GitHub release with changelog
           - Upload installers and artifacts"

           # Push the tag using PAT authentication
           git push origin "$TAG"

           echo "üéâ Created and pushed tag: $TAG"
           echo "üöÄ This will trigger the cargo-dist release workflow"

      - name: Skip if tag exists
        if: steps.check_tag.outputs.tag_exists == 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          echo "‚ÑπÔ∏è  Tag v$VERSION already exists, skipping tag creation"
          echo "The existing tag will be used for the release"
